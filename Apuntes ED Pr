PRÁCTICA 1 - EFICIENCIA

Vamos a comparar eficiencia teórica y empírica.

///////////////////////////////////////////////////////////////////////////////////////////////

Comenzamos analizando la eficiencia del código efic.cpp.

La función orden_n2_puro() tiene una eficiencia de n veces lo que tarde busqueda_lineal(). Esta función en el peor de los casos tiene una eficiencia de O(n). Por lo tanto, orden_n2_puro tiene una eficiencia de O(n^2).
Como curiosidad, crear_matriz() también tiene una eficiencia O(n).

Teóricamente, la función orden_n2_puro() es O(n^2), es decir an^2 + bn + c.

Ahora vamos a calcularlo empíricamente, lanzando la función con un número variable de datos. Para sacar la función cuadrática que más se acerca a esa nube de datos, vamos a utilizar gnuplot, que nos dará las constantes a, b y c de la función teócia.

Lo mejor es que al ejecutar saquemos los resultados en un txt.

Para usar gnuplot ponemos gnuplot en la línea de comandos.
Para pintar por ejemplo usamos:
    > plot 2*x.
Para pintar el fichero de datos efic.txt usamos:
    >plot "efic.txt"
Aparecerán los datos representados en una ventana aparte.

Vamos a estimar la función que se ajusta a la número de datos. Para buscar la función cuadrática escribimos:
    > f(x) = a*x**2 + b*x + c
    > fit f(x) "efic.txt" via a,b,c
Vamos a comprobar gráficamente la función que nos ha dado el gnuplot a la O(n^2) que salió teóricamente:
    > plot "efic.txt" with p title "Datos", f(x) with l title "Funcion"
Se ajustan perfectamente.
Vamos a definir otra función:
    > g(x) = a*x + b
Ajustamos efic.txt a g(x) para ver si también cuadra.
    > fit g(x) "efic.txt" via a,b
    > plot "efic.txt" with p title "Datos", g(x) with l title "Funcion"
//////////////////////////////////////////////////////////////////////////////////////////////

La función de fibonacci será exponencial.

//////////////////////////////////////////////////////////////////////////////////////////////

Probamos con ejercicio2.cpp nosotros solos.

Medimos alg2_1(), que repite n veces opera(), que es O(1), luego el algoritmo es O(n).
Ajustamos con la función f(x) = a*x + b. Concuerda.

////////////////////////////////////////////////////////////////////////////////////////////// 

Para la entrega, hacer un pdf explicando un poco este asunto. Hacer varias pruebas, con imágenes y sacando la eficiencia teórica y empírica. Empezar con efic.cpp y ejercicio2.cpp y añadir un par más a nuestro gusto.

//////////////////////////////////////////////////////////////////////////////////////////////

PRÁCTICA 2 - ABSTRACCIÓN
SESIÓN 1 - RACIONAL & DOXYGEN

Vamos a tener que añadir funcionalidad a la clase Racional (al menos estas): HECHO
- operator*     num/dem * num2/dem2 = num*num2/dem*dem2
- operator/
- operator-

3 pasos:
1. Añadir los protocolos al .h incluyendo comentarios doxygen
2. Implementar los operadores en el .cpp
3. Comprobamos los operadores en el usoRacional.cpp

Compilar con makefile y probar. Recomienda depurar.

Cosas para refinar:
- Comprobar que el denumerador nunca se anula.  HECHO
- Cambiar operator << y >>.

Esto se subiría en la sección de "Ejercicios de Evaluación Contínua"

////////////////////////// PRÁCTICA PUNTUABLE /////////////////////////////////////////////////////

Vamos a disponer de un fichero de datos con registros con: año, número de eventos históricos y los eventos.
A cada uno de dichos registros se le llama fecha histórica. El conjunto de las fechas históricas se le denomina cronología.

Tenemos que definir fecha_historica.h para poder trabajar así.

Tenemos que usar vectores dinámicos SIN STL.

En el programa de prueba hay que probar la cronologías y, a su vez, fecha histórica.
Funciones sugeridas de cronología:
- Da todos los eventos de un año.
- Dado un string encontrar el año en que está. Ejemplo: buscar Sherlock Holmes (puede estar en varios años).
- Une dos cronologías.

Dos vectores dinámicos: uno que guarda los componentes de una fecha histórica y otro que guarda las fechas históricas.

Ejemplo de procedimiento de lectura para el siguiente formato:

1900 2 eventos:
*) Sherlock Holmes
*) Great Train

istream & operator >> (istream & is, fecha_historica & e) { 
    char b,f: string s;
    is >> e.anio >> e.numero_eventos;
    getline(is,s); // ignora "eventos:"
    e.reservados = e.num_eventos;
    delete[] e.str;
    e.str = new string[ e.reservados];
    for( int i = 0; i < e.reservados; i++ ){
        is >> b >> f; // ignora *)
        getline(is,s);
        str[i]=s;
    }
    return is;
}

Ejemplo de procedimiento de lectura para una cronología:

istream & operator >> ( istream & is, cronologia & c ) {
    fecha_historica b;
    while( is >> b )
        c.aniadir_evento(b);
    return is;
}

//////////////////////////////////////////////////////////////////////////////////////////////////

Le gustaría que la PRÁCTICA 3 se hiciera con Templates.

Hay que hacer una pila que en cada posición almacena el valor en sí y el
máximo introducido hasta ese momento.

La implementación se puede hacer de dos maneras:
- Usando vectores dinámicos. La función tope sería acceder a la última casilla ocupada (n-1).
  Borrar sería quitar el último elemento del vector.
- Usando colas. La función poner se realizaría volcando los elementos en una estructura, poner
  el nuevo elemento y volcar a su lugar original.

No se puede usar la STL.