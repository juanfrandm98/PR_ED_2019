<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classLetra" kind="class" language="C++" prot="public">
    <compoundname>Letra</compoundname>
    <includes refid="letra_8h" local="no">letra.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classLetra_1ab6874ca1760bcadadd3fc79b03a4da0a" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char Letra::letra</definition>
        <argsstring></argsstring>
        <name>letra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="32" column="1" bodyfile="letra.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLetra_1a99d49643328a9499041049518aa85528" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Letra::puntos</definition>
        <argsstring></argsstring>
        <name>puntos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="33" column="1" bodyfile="letra.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLetra_1ad65e9215bcd675578674e9c3d74db277" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Letra::repeticiones</definition>
        <argsstring></argsstring>
        <name>repeticiones</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="34" column="1" bodyfile="letra.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classLetra_1a2e236c67e3630258c6d3d9f2a9e66709" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Letra::Letra</definition>
        <argsstring>()</argsstring>
        <name>Letra</name>
        <briefdescription>
<para>Constructor por defecto. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="43" column="1" bodyfile="letra.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a4a9043a661643c729024bb36f93e5530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Letra::Letra</definition>
        <argsstring>(const Letra &amp;L)</argsstring>
        <name>Letra</name>
        <param>
          <type>const <ref refid="classLetra" kindref="compound">Letra</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Constructor de copia. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref> que se va a copiar. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a5585e6c2b66b02ae83498883d2391ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Letra::Letra</definition>
        <argsstring>(const char &amp;l, const int &amp;punt, const int &amp;rep)</argsstring>
        <name>Letra</name>
        <param>
          <type>const char &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>punt</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
<para>Constructor con parámetros. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>punt</parametername>
</parameternamelist>
<parameterdescription>
<para>Puntuación de la letra. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rep</parametername>
</parameternamelist>
<parameterdescription>
<para>Número de repeticiones de la letra en el <ref refid="classDiccionario" kindref="compound">Diccionario</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a3b9ef1dfc6861f580023b22c3904f44e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Letra::~Letra</definition>
        <argsstring>()</argsstring>
        <name>~Letra</name>
        <briefdescription>
<para>Destructor de la clase. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="68" column="1" bodyfile="letra.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a3ac983e07d6fc85128780293f1336783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Letra::setLetra</definition>
        <argsstring>(const char &amp;l)</argsstring>
        <name>setLetra</name>
        <param>
          <type>const char &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Setter de letra. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a8762606c8207c44f6693016202d8a0b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char Letra::getLetra</definition>
        <argsstring>() const</argsstring>
        <name>getLetra</name>
        <briefdescription>
<para>Getter de letra. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a6383eeda06edff7bb8a239193f240dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Letra::setPuntos</definition>
        <argsstring>(const int &amp;punt)</argsstring>
        <name>setPuntos</name>
        <param>
          <type>const int &amp;</type>
          <declname>punt</declname>
        </param>
        <briefdescription>
<para>Setter de puntos. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>punt</parametername>
</parameternamelist>
<parameterdescription>
<para>Puntuación de la letra. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a032d3df56fbd01acfce1e667d1e2297c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Letra::getPuntos</definition>
        <argsstring>() const</argsstring>
        <name>getPuntos</name>
        <briefdescription>
<para>Getter de puntos. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a1d9941c6329b4c240d1d3558c0438bb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Letra::setRepeticiones</definition>
        <argsstring>(const int &amp;rep)</argsstring>
        <name>setRepeticiones</name>
        <param>
          <type>const int &amp;</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
<para>Setter de repeticiones. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rep</parametername>
</parameternamelist>
<parameterdescription>
<para>Número de repeticiones de la letra. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1af943473b6ed3beec0ba8f203fca78eca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Letra::getRepeticiones</definition>
        <argsstring>() const</argsstring>
        <name>getRepeticiones</name>
        <briefdescription>
<para>Getter de repeticiones. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1af89328eecfd4cb10ec33b34fc2c61604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLetra" kindref="compound">Letra</ref> &amp;</type>
        <definition>Letra&amp; Letra::operator=</definition>
        <argsstring>(const Letra &amp;L)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classLetra" kindref="compound">Letra</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Operador de asignación. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref> a asignar. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classLetra" kindref="compound">Letra</ref> asignada. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a80bf42467a105685d923a3b6f146c2f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Letra::operator==</definition>
        <argsstring>(const Letra &amp;L) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classLetra" kindref="compound">Letra</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Operador igual igual. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref> con la que comparar. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Devuelve true si el valor de la letra es igual que la pasada como argumento. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLetra_1a34ee9760a2ccf4f2dbfadd2597eca29f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Letra::operator&lt;</definition>
        <argsstring>(const Letra &amp;L) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classLetra" kindref="compound">Letra</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Operador menor que. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref> con la que comparar. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Devuelve true si el valor de la letra es menor que la pasada como argumento. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="143" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classLetra_1a170b7b3a948da65d478d5dfff59d8912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, Letra &amp;L)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classLetra" kindref="compound">Letra</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Salida de una <ref refid="classLetra" kindref="compound">Letra</ref> a ostream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream de salida. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref> a escribir. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>Se obtiene la <ref refid="classLetra" kindref="compound">Letra</ref> con el formato adecuado. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="classLetra_1a96f68357d26362519e5edd8873c98302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Letra &amp;L)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classLetra" kindref="compound">Letra</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Entrada de una <ref refid="classLetra" kindref="compound">Letra</ref> desde istream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream de entrada. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref> en la que se escribe. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>La</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classLetra" kindref="compound">Letra</ref> leída. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>La entrada tiene el siguiente formato: <ref refid="classLetra" kindref="compound">Letra</ref> Puntos Repeticiones </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="letra.h" line="165" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>T.D.A. <ref refid="classLetra" kindref="compound">Letra</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>Una instancia <emphasis>c</emphasis> del tipo de datos abstracto <computeroutput><ref refid="classLetra" kindref="compound">Letra</ref></computeroutput> es un objeto con cuatro campos: un char y dos enteros.</para><para>El char indica la letra que se está almacenando y los enteros indican su puntuación y el número de repeticiones que tiene en un diccionario.</para><para>Juan Francisco Díaz Moreno <simplesect kind="date"><para>Diciembre 2019 </para></simplesect>
</para>    </detaileddescription>
    <location file="letra.h" line="28" column="1" bodyfile="letra.h" bodystart="28" bodyend="167"/>
    <listofallmembers>
      <member refid="classLetra_1a8762606c8207c44f6693016202d8a0b4" prot="public" virt="non-virtual"><scope>Letra</scope><name>getLetra</name></member>
      <member refid="classLetra_1a032d3df56fbd01acfce1e667d1e2297c" prot="public" virt="non-virtual"><scope>Letra</scope><name>getPuntos</name></member>
      <member refid="classLetra_1af943473b6ed3beec0ba8f203fca78eca" prot="public" virt="non-virtual"><scope>Letra</scope><name>getRepeticiones</name></member>
      <member refid="classLetra_1a2e236c67e3630258c6d3d9f2a9e66709" prot="public" virt="non-virtual"><scope>Letra</scope><name>Letra</name></member>
      <member refid="classLetra_1a4a9043a661643c729024bb36f93e5530" prot="public" virt="non-virtual"><scope>Letra</scope><name>Letra</name></member>
      <member refid="classLetra_1a5585e6c2b66b02ae83498883d2391ed6" prot="public" virt="non-virtual"><scope>Letra</scope><name>Letra</name></member>
      <member refid="classLetra_1ab6874ca1760bcadadd3fc79b03a4da0a" prot="private" virt="non-virtual"><scope>Letra</scope><name>letra</name></member>
      <member refid="classLetra_1a34ee9760a2ccf4f2dbfadd2597eca29f" prot="public" virt="non-virtual"><scope>Letra</scope><name>operator&lt;</name></member>
      <member refid="classLetra_1a170b7b3a948da65d478d5dfff59d8912" prot="public" virt="non-virtual"><scope>Letra</scope><name>operator&lt;&lt;</name></member>
      <member refid="classLetra_1af89328eecfd4cb10ec33b34fc2c61604" prot="public" virt="non-virtual"><scope>Letra</scope><name>operator=</name></member>
      <member refid="classLetra_1a80bf42467a105685d923a3b6f146c2f9" prot="public" virt="non-virtual"><scope>Letra</scope><name>operator==</name></member>
      <member refid="classLetra_1a96f68357d26362519e5edd8873c98302" prot="public" virt="non-virtual"><scope>Letra</scope><name>operator&gt;&gt;</name></member>
      <member refid="classLetra_1a99d49643328a9499041049518aa85528" prot="private" virt="non-virtual"><scope>Letra</scope><name>puntos</name></member>
      <member refid="classLetra_1ad65e9215bcd675578674e9c3d74db277" prot="private" virt="non-virtual"><scope>Letra</scope><name>repeticiones</name></member>
      <member refid="classLetra_1a3ac983e07d6fc85128780293f1336783" prot="public" virt="non-virtual"><scope>Letra</scope><name>setLetra</name></member>
      <member refid="classLetra_1a6383eeda06edff7bb8a239193f240dcc" prot="public" virt="non-virtual"><scope>Letra</scope><name>setPuntos</name></member>
      <member refid="classLetra_1a1d9941c6329b4c240d1d3558c0438bb1" prot="public" virt="non-virtual"><scope>Letra</scope><name>setRepeticiones</name></member>
      <member refid="classLetra_1a3b9ef1dfc6861f580023b22c3904f44e" prot="public" virt="non-virtual"><scope>Letra</scope><name>~Letra</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
